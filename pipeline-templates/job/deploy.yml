parameters:  
  Environment:
  ServiceConnection:
  SqlAdditionalArguments:
  SqlAdditionalArgumentsFlag: $(SqlAdditionalArgumentsFlag)

jobs:
- deployment: DeployWebApp
  pool:
    name: DAS - Continuous Deployment Agents
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/set-backendaccessrestrictions-variable.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SharedEnvResourceGroup: $(SharedEnvResourceGroup)
            SharedEnvVirtualNetworkName : $(SharedEnvVirtualNetworkName)
            BackEndAccessRestrictionsExcludedSubnets: $(BackEndAccessRestrictionsExcludedSubnets)
            ResourceEnvironmentName: $(ResourceEnvironmentName)
            UnrestrictedEnvironments: $(UnrestrictedEnvironments)
            UptimeMonitoringAccessRestrictions: $(UptimeMonitoringAccessRestrictions)
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: $(SubscriptionId)
            Location: $(ResourceGroupLocation)
            Environment: ${{ parameters.Environment }}
            TemplatePath: $(Pipeline.Workspace)/LevyTransferMatchingApi/azure/template.json
            ParametersPath: $(Pipeline.Workspace)/LevyTransferMatchingApi/azure/template.parameters.json
            IsMultiRepoCheckout: true
            TemplateSecrets:
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)
        - template: azure-pipelines-templates/deploy/step/generate-config.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SourcePath: $(Pipeline.Workspace)/das-employer-config/Configuration/das-levy-transfer-matching-api
            TargetFileName: '*.schema.json'
            TableName: Configuration
        - script: echo 'compile, ${{variables.SqlAdditionalArgumentsFlag}}''
        - script: echo 'macro, $(SqlAdditionalArgumentsFlag)''
        - script: echo 'runtime, $[variables.SqlAdditionalArgumentsFlag]'
        - task: SqlAzureDacpacDeployment@1
          displayName: Execute Azure SQL DacpacTask
          inputs:
            AzureSubscription: ${{ parameters.ServiceConnection }}
            ServerName: $(SharedSQLServerFQDN)
            DatabaseName: $(DatabaseName)
            SqlUsername: $(SharedSQLServerUsername)
            SqlPassword: $(SharedSQLServerPassword)
            DacpacFile: $(Pipeline.Workspace)/DacpacArtifact/src/SFA.DAS.LevyTransferMatching.Database/bin/Output/SFA.DAS.LevyTransferMatching.Database.dacpac
            ${{ if eq(parameters.SqlAdditionalArgumentsFlag, 'test') }}:
              AdditionalArguments: ${{ parameters.SqlAdditionalArguments }}
      #  - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
      #    parameters:
      #      ServiceConnection: ${{ parameters.ServiceConnection }}
      #      AppServiceName: $(ApiAppServiceName)
      #      DeploymentPackagePath: $(Pipeline.Workspace)/LevyTransferMatchingApi/SFA.DAS.LevyTransferMatching.Api.zip